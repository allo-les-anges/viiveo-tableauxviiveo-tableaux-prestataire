// viiveo-app.js - √Ä placer sur GitHub

// Variables globales pour l'√©tat de la mission et du prestataire
let currentMissionId = null;
let currentClientPrenom = "", currentClientNom = "";
let currentPrestatairePrenom = null, currentPrestataireNom = null;
let currentLatitude = null, currentLongitude = null;
let heureDebut = null;

// Ajoutez cette variable globale pour l'instance du scanner.
// Cela permet de la nettoyer correctement √† la fermeture de la modale.
let qrScannerInstance = null; // Correctement d√©clar√© en global

// Fonctions li√©es au scanner et √† la modale
function setTodayDate(obsDateInput) {
    if (obsDateInput) {
        obsDateInput.value = new Date().toISOString().split("T")[0];
    }
}

function openModalStartPrestation(missionId, clientPrenom, clientNom) {
    const modalOverlay = document.getElementById("modalOverlay");
    const stepQR = document.getElementById("stepQR");
    const stepForm = document.getElementById("stepForm");
    const stepSuccess = document.getElementById("stepSuccess");

    if (!modalOverlay || !stepQR || !stepForm || !stepSuccess) {
        console.error("Erreur: √âl√©ments de la modale non trouv√©s lors de l'ouverture.");
        alert("Une erreur est survenue lors de l'ouverture de la modale. Veuillez recharger la page.");
        return;
    }

    if (!window.currentEmail) {
        alert("Erreur: Les donn√©es du prestataire ne sont pas charg√©es. Veuillez vous reconnecter.");
        console.error("Tentative d'ouvrir la modale sans donn√©es prestataire (email null).");
        return;
    }

    currentMissionId = missionId;
    currentClientPrenom = clientPrenom;
    currentClientNom = clientNom;
    currentPrestatairePrenom = window.currentPrenom;
    currentPrestataireNom = window.currentNom;

    // S'assurer que les √©tapes sont dans le bon ordre d'affichage
    // IMPORTANT : On masque toutes les √©tapes d'abord pour √©viter les flashs.
    // stepQR.style.display sera mis √† "flex" dans startQrScanner()
    stepQR.style.display = "none";
    stepForm.style.display = "none";
    stepSuccess.style.display = "none";
    modalOverlay.style.display = "flex"; // Rend la modale visible

    // D√©marre le scanner APRES que la modale est rendue visible
    // Un l√©ger d√©lai peut √™tre b√©n√©fique ici aussi pour s'assurer que le DOM est "peint"
    // avant que html5-qrcode ne tente d'acc√©der √† l'√©l√©ment.
    setTimeout(() => {
        startQrScanner();
    }, 50); // Un d√©lai de 50ms pour la robustesse.
}

function closeModal() {
    const modalOverlay = document.getElementById("modalOverlay");
    if (modalOverlay) {
        modalOverlay.style.display = "none"; // CACHE LA MODALE ICI
    }
    const obsForm = document.getElementById("obsForm");
    if (obsForm) {
        clearForm(obsForm); // Assurez-vous que cette fonction existe et vide bien les champs
    }
    // Arr√™te le scanner si une instance est active
    // Correction: Utilisez isScanning seulement si qrScannerInstance n'est pas null
    if (qrScannerInstance && typeof qrScannerInstance.stop === 'function') {
        qrScannerInstance.stop().catch(err => console.warn("Erreur √† l'arr√™t du scanner:", err));
    }
    qrScannerInstance = null; // Nettoyer la r√©f√©rence de mani√®re inconditionnelle apr√®s tentative d'arr√™t
}

async function startQrScanner() {
    const qrReaderElement = document.getElementById("qr-reader");
    if (!qrReaderElement) {
        console.error("√âl√©ment 'qr-reader' non trouv√©. Le scanner ne peut pas d√©marrer.");
        alert("Erreur: Le scanner QR ne peut pas d√©marrer (√©l√©ment manquant).");
        closeModal();
        return;
    }

    // Assurez-vous que l'√©l√©ment conteneur du scanner est visible avant de le d√©marrer.
    // Il est dans stepQR, donc stepQR doit √™tre visible.
    const stepQR = document.getElementById("stepQR");
    if (stepQR) {
        stepQR.style.display = "flex"; // S'assure que stepQR est visible pour le scanner
    }

    // Nettoie l'√©l√©ment avant de red√©marrer le scanner.
    // C'est tr√®s important pour √©viter les probl√®mes si le scanner a √©t√© arr√™t√©/red√©marr√©.
    qrReaderElement.innerHTML = "";

    // Si une instance existe d√©j√† et est active, arr√™tez-la et mettez-la √† null pour √©viter les conflits
    if (qrScannerInstance && typeof qrScannerInstance.stop === 'function') {
        try {
            await qrScannerInstance.stop();
            console.log("Ancienne instance du scanner arr√™t√©e.");
        } catch (error) {
            console.warn("Erreur lors de l'arr√™t d'une ancienne instance de scanner:", error);
        } finally {
            qrScannerInstance = null; // Nettoyage de l'instance, m√™me si l'arr√™t a √©chou√©
        }
    }

    // Cr√©e une nouvelle instance du scanner et la stocke pour pouvoir l'arr√™ter
    qrScannerInstance = new Html5Qrcode("qr-reader"); // Affectation √† la variable globale

    console.log("Tentative de d√©marrage du scanner QR..."); // AJOUT√â POUR LE D√âBOGAGE

    try {
        await qrScannerInstance.start( // Utilisez la variable globale ici
            { facingMode: "environment" }, // Utilise la cam√©ra arri√®re
            {
                fps: 10, // Nombre d'images par seconde pour scanner
                qrbox: { width: 250, height: 250 }, // Taille du carr√© de d√©tection (utilisez l'objet pour html5-qrcode v2.x)
                aspectRatio: 1.333334 // Recommand√© pour stabiliser le flux vid√©o
            },
            async (decodedText, decodedResult) => { // Ajout de decodedResult pour coh√©rence
                // Cette fonction est appel√©e quand un QR code est d√©tect√©
                console.log(`QR Code d√©tect√©: ${decodedText}`);
                try {
                    // Arr√™te le scanner imm√©diatement apr√®s la d√©tection
                    if (qrScannerInstance && typeof qrScannerInstance.stop === 'function') {
                        await qrScannerInstance.stop();
                        qrScannerInstance = null; // R√©initialise l'instance
                        console.log("Scanner arr√™t√© apr√®s d√©tection r√©ussie.");
                    }

                    // Votre logique de traitement du QR code ici
                    const url = new URL(decodedText);
                    const idClient = url.searchParams.get("idclient") || url.searchParams.get("clientId");
                    if (!idClient) throw new Error("QR invalide : idclient manquant");

                    console.log("ID Client extrait:", idClient);
                    console.log("Email prestataire global (window.currentEmail):", window.currentEmail);
                    console.log("URL Apps Script globale (window.webAppUrl):", window.webAppUrl);

                    const fullAppsScriptApiUrl = `${window.webAppUrl}?type=verifqr&idclient=${encodeURIComponent(idClient)}&email=${encodeURIComponent(window.currentEmail)}`;
                    console.log("URL COMPLETE ENVOYEE AU BACKEND:", fullAppsScriptApiUrl);

                    const callbackName = 'cbVerifyClient' + Date.now();
                    const data = await callApiJsonp(fullAppsScriptApiUrl, callbackName);

                    if (!data.success) {
                        alert("‚ùå " + data.message);
                        closeModal();
                        return;
                    }

                    heureDebut = new Date().toISOString();
                    getGeolocationAndShowForm();

                } catch (err) {
                    alert("Erreur lors du scan QR : " + (err.message || "Erreur inconnue")); // Utilise err.message ou une string g√©n√©rique
                    console.error("Erreur dans startQrScanner (callback de succ√®s - d√©tails compl√®tes):", err); // D√©tail du log
                    closeModal();
                }
            },
            (errorMessage) => {
                // Cette fonction est appel√©e pour les erreurs de progression (par exemple, pas de QR code trouv√©)
                // console.warn("QR Scan progress error:", errorMessage); // Re-comment√© comme il peut √™tre trop verbeux
            }
        );
        console.log("Scanner QR d√©marr√© avec succ√®s.");
    } catch (err) {
        // Cette fonction est appel√©e si le scanner ne peut pas d√©marrer du tout (par ex. probl√®me de cam√©ra, permissions)
        alert("Impossible d‚Äôactiver la cam√©ra. Assurez-vous d'avoir donn√© les permissions et que la cam√©ra n'est pas utilis√©e par une autre application.");
        // TR√àS IMPORTANT: Afficher l'objet d'erreur complet ici
        console.error("Erreur d'initialisation de la cam√©ra (d√©tails compl√®tes):", err);
        closeModal();
    }
}

function getGeolocationAndShowForm() {
    if (!navigator.geolocation) {
        alert("‚ùå Votre appareil ne supporte pas la g√©olocalisation.");
        closeModal();
        return;
    }

    navigator.geolocation.getCurrentPosition(
        position => {
            currentLatitude = position.coords.latitude;
            currentLongitude = position.coords.longitude;
            showForm();
        },
        error => {
            let message = "‚ö†Ô∏è Erreur de g√©olocalisation.";
            switch (error.code) {
                case error.PERMISSION_DENIED:
                    message = "‚ùå Vous devez autoriser la g√©olocalisation pour continuer.";
                    break;
                case error.POSITION_UNAVAILABLE:
                    message = "üìç Position non disponible.";
                    break;
                case error.TIMEOUT:
                    message = "‚è±Ô∏è Le d√©lai de localisation est d√©pass√©.";
                    break;
                default:
                    message = "‚ùå Erreur inconnue.";
            }
            alert(message);
            console.error("Erreur de g√©olocalisation:", error);
            closeModal();
        },
        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
    );
}

function showForm() {
    const stepQR = document.getElementById("stepQR");
    const stepForm = document.getElementById("stepForm");
    const clientNameInput = document.getElementById("clientName");
    const obsDateInput = document.getElementById("obsDate");

    if (!stepQR || !stepForm || !clientNameInput || !obsDateInput) {
        console.error("√âl√©ments du formulaire de prestation non trouv√©s pour l'affichage.");
        alert("Erreur: Impossible d'afficher le formulaire de prestation. Veuillez recharger la page.");
        closeModal();
        return;
    }

    stepQR.style.display = "none";
    stepForm.style.display = "flex"; // Correctement en "flex"
    clientNameInput.value = `${currentClientPrenom} ${currentClientNom}`;
    setTodayDate(obsDateInput);
}

function clearForm(formElement) {
    if (!formElement) return;
    Array.from(formElement.elements).forEach(el => {
        if (el.tagName === 'INPUT' || el.tagName === 'TEXTAREA') {
            el.value = '';
        } else if (el.tagName === 'SELECT') {
            el.selectedIndex = 0;
        }
    });
    // R√©initialisation sp√©cifique du champ de fichier et de la pr√©visualisation
    const photosInput = formElement.querySelector("#photos");
    if (photosInput) photosInput.value = "";
    const photosPreview = formElement.querySelector("#photosPreview");
    if (photosPreview) photosPreview.innerHTML = "";
}


function tempDisable(btn, ms = 1000) {
    if (!btn) return;
    btn.disabled = true;
    setTimeout(() => {
        btn.disabled = false;
    }, ms);
}

function createElementFromHTML(htmlString) {
    const div = document.createElement('div');
    div.innerHTML = htmlString.trim();
    return div.firstChild;
}

// Nouvelle fonction pour initialiser les √©couteurs de la modale d'observation
function initializeModalListeners() {
    const modalOverlay = document.getElementById("modalOverlay");
    const stepQR = document.getElementById("stepQR");
    const stepForm = document.getElementById("stepForm");
    const stepSuccess = document.getElementById("stepSuccess");
    const obsForm = document.getElementById("obsForm");
    const photosInput = document.getElementById("photos");
    const photosPreview = document.getElementById("photosPreview");
    const clientNameInput = document.getElementById("clientName");
    const obsDateInput = document.getElementById("obsDate");
    const etatSanteInput = document.getElementById("etatSante");
    const etatFormeInput = document.getElementById("etatForme");
    const environnementInput = document.getElementById("environnement");

    // V√©rifier si tous les √©l√©ments essentiels de la modale sont pr√©sents
    if (modalOverlay && stepQR && stepForm && stepSuccess && obsForm && photosInput && photosPreview && clientNameInput && obsDateInput && etatSanteInput && etatFormeInput && environnementInput) {
        // Attachez le change listener pour les photos
        photosInput.addEventListener("change", e => {
            photosPreview.innerHTML = "";
            const files = e.target.files;
            if (files.length > 3) {
                alert("Vous ne pouvez s√©lectionner que 3 photos max.");
                photosInput.value = "";
                return;
            }
            // Utilisation de Promise.all pour s'assurer que toutes les images sont charg√©es avant de les afficher
            const fileReaders = Array.from(files).map(file => {
                return new Promise(resolve => {
                    const reader = new FileReader();
                    reader.onload = ev => {
                        const img = document.createElement("img");
                        img.src = ev.target.result;
                        photosPreview.appendChild(img);
                        resolve();
                    };
                    reader.readAsDataURL(file);
                });
            });
            Promise.all(fileReaders).then(() => {
                console.log("Toutes les photos ont √©t√© pr√©visualis√©es.");
            });
        });

        // Attachez le submit listener pour le formulaire d'observation
        obsForm.addEventListener("submit", async e => {
            e.preventDefault();

            if (photosInput.files.length > 3) {
                alert("Maximum 3 photos autoris√©es.");
                return;
            }

            if (!window.currentEmail) {
                alert("Erreur: Donn√©es du prestataire manquantes pour l'envoi.");
                console.error("Tentative d'envoi de formulaire sans email prestataire.");
                return;
            }

            const heureFin = new Date().toISOString();
            const formData = new FormData();
            formData.append("type", "envoyerFiche");
            formData.append("missionId", currentMissionId);
            formData.append("prenomClient", currentClientPrenom);
            formData.append("nomClient", currentClientNom);
            formData.append("obsDate", obsDateInput.value);
            formData.append("etatSante", etatSanteInput.value);
            formData.append("etatForme", etatFormeInput.value);
            formData.append("environnement", environnementInput.value);
            formData.append("latitude", currentLatitude);
            formData.append("longitude", currentLongitude);
            formData.append("heureDebut", heureDebut);
            formData.append("heureFin", heureFin);
            formData.append("prestatairePrenom", window.currentPrenom);
            formData.append("prestataireNom", window.currentNom);
            formData.append("prestataireEmail", window.currentEmail);

            for (let file of photosInput.files) {
                formData.append("photos", file);
            }

            try {
                const res = await fetch(window.webAppUrl, {
                    method: "POST",
                    body: formData,
                });
                const json = await res.json();
                if (json.success) {
                    stepForm.style.display = "none";
                    stepSuccess.style.display = "flex"; // Changed to flex for consistency with modalContent
                    if (typeof window.loadMissions === 'function' && window.currentEmail) {
                        window.loadMissions(window.currentEmail);
                    }
                } else {
                    alert("Erreur : " + (json.message || "Envoi √©chou√©"));
                }
            } catch (err) {
                alert("Erreur r√©seau ou du serveur lors de l'envoi de la fiche.");
                console.error("Erreur lors de l'envoi de la fiche:", err);
            }
        });

        // Attachez les √©couteurs pour les boutons de la modale ici
        // Utilisation de querySelector pour √™tre plus robuste si l'ID n'est pas unique
        if (document.querySelector("#btnCancelQR")) document.querySelector("#btnCancelQR").onclick = closeModal;
        if (document.querySelector("#btnCancelForm")) document.querySelector("#btnCancelForm").onclick = closeModal;
        if (document.querySelector("#btnCloseSuccess")) document.querySelector("#btnCloseSuccess").onclick = closeModal;

        console.log("√âcouteurs de la modale d'observation initialis√©s.");

    } else {
        console.warn("Certains √©l√©ments de la modale d'observation sont manquants. Nouvelle tentative d'initialisation des √©couteurs de modale...");
        // Si les √©l√©ments ne sont pas l√†, relancez l'initialisation apr√®s un court d√©lai
        // C'est utile si le HTML est inject√© apr√®s le premier DOMContentLoaded.
        setTimeout(initializeModalListeners, 100);
    }
}

function initializeLoginForm() {
    const loginForm = document.getElementById("loginForm");
    console.log("DEBUG initializeLoginForm: loginForm element:", loginForm); // NOUVEAU LOG
    console.log("DEBUG initializeLoginForm: typeof login:", typeof login); // NOUVEAU LOG

    if (loginForm && typeof login === 'function') {
        // Supprimez l'√©couteur pr√©c√©dent pour √©viter les doublons si la fonction est appel√©e plusieurs fois
        loginForm.removeEventListener("submit", login); // Supprime l'√©couteur si d√©j√† pr√©sent
        loginForm.addEventListener("submit", login);
        console.log("√âcouteur de soumission ajout√© au formulaire de connexion.");
    } else {
        console.warn("Formulaire de connexion ou fonction 'login' non disponible. Nouvelle tentative...");
        setTimeout(initializeLoginForm, 200); // R√©essaie si le formulaire n'est pas encore l√†
    }
}

// Cette fonction cr√©e et injecte le HTML de la modale dynamiquement
function createAndInjectModalHtml() {
    // Correction: Retir√© tous les styles inline sauf le display initial,
    // pour que le CSS externe (viiveo-styles.css) prenne le relais.
    const modalHtml = `
        <div id="modalOverlay" style="display: none;">
            <div id="modalContent">
                <div id="stepQR" style="display:none;">
                    <h2>üì∏ Scanner le QR code client</h2>
                    <div id="qr-reader"></div>
                    <button id="btnCancelQR">Annuler</button>
                </div>

                <div id="stepForm" style="display:none;">
                    <h2>üìù Fiche d'observation</h2>
                    <form id="obsForm">
                        <label for="clientName">Nom du client</label>
                        <input type="text" id="clientName" readonly />
                        <label for="obsDate">Date de l'observation</label>
                        <input type="date" id="obsDate" required />
                        <label for="etatSante">√âtat de sant√©</label>
                        <textarea id="etatSante" rows="3" placeholder="D√©crire l'√©tat de sant√©..."></textarea>
                        <label for="etatForme">√âtat de forme</label>
                        <select id="etatForme" required>
                            <option value="">-- Choisir --</option>
                            <option>Tr√®s bon</option>
                            <option>Bon</option>
                            <option>Moyen</option>
                            <option>Faible</option>
                            <option>Tr√®s faible</option>
                        </select>
                        <label for="environnement">Environnement</label>
                        <textarea id="environnement" rows="3" placeholder="D√©crire l'environnement..."></textarea>
                        <label for="photos">Photos (max 3)</label>
                        <input type="file" id="photos" accept="image/*" multiple />
                        <div id="photosPreview"></div>
                        <button type="submit">Envoyer la fiche</button>
                        <button type="button" id="btnCancelForm">Annuler</button>
                    </form>
                </div>

                <div id="stepSuccess" style="display:none;">
                    <h2>‚úÖ Fiche envoy√©e avec succ√®s !</h2>
                    <button id="btnCloseSuccess">Fermer</button>
                </div>
            </div>
        </div>
    `;
    // Injecte le HTML √† la fin du corps du document
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    console.log("Modal HTML injected dynamically via JS.");

    // Correction: Ce setTimeout n'est plus n√©cessaire ici.
    // Les styles par d√©faut sont g√©r√©s par le CSS externe,
    // et openModalStartPrestation g√®re l'affichage initial.
}

// Point d'entr√©e principal du script
document.addEventListener('DOMContentLoaded', () => {
    initializeLoginForm(); // Initialise le formulaire de connexion

    // Injecte le HTML de la modale dynamiquement via JavaScript
    createAndInjectModalHtml();

    // Attendre un court instant pour que le DOM soit mis √† jour
    // avant d'initialiser les √©couteurs de la modale
    setTimeout(() => {
        initializeModalListeners();
        console.log("initializeModalListeners appel√©e apr√®s injection et d√©lai.");
    }, 100); // 100ms est un bon point de d√©part, ajustez si n√©cessaire
});
